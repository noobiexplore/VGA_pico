;program name
.program hsync

;frontporch: 16 clocks (0.64us at 25MHz)
;syncpulse: 96 clocks (3.84us at 25MHz)
;backporch: 48 clocks (1.92us at 25MHz)
;active: 640 clocks (25.6us at 25MHz)
;
;High for 704 cycles (28.16us at 25MHz)
;Low for 96 cycles (3.84us at 25MHz)
;Total period of 800 cycles (32us at 25MHz)
;


pull block                 ; Pull from FIFO to Output Shift Register(OSR)
.wrap_target               ; Program wraps to here

; ACTIVE + FRONTPORCH
mov x, osr                 ; Copy value from OSR to x scratch Register
activeporch:
    jmp x-- activeporch    ; Remain high in active mode and front porch

; SYNC PULSE
pulse:
    set pins, 0 [31]       ; Low hsync pulse (32 cycles)
    set pins, 0 [31]       ; Low hsync pulse (64 cycles)
    set pins, 0 [31]       ; Low hsync pulse (96 cycles)

; BACKPORCH
backporch:
    set pins, 1 [31]       ; High for backporch (32 cycles)
    set pins, 1 [12]       ; High for backporch (45 cycles)
    irq 0 [1]              ; Set IRQ to signal end of line (47 cycles)
.wrap


% c-sdk {
    static inline void hsync_program_init(PIO pio, uint sm, uint offset, uint pin) {
        // create a state machine configuration object c
        pio_sm_config c = hsync_program_get_default_config(offset);

        // Map the state machine's SET pin group to one pin, namely the 'pin' parameter to this function
        sm_config_set_set_pins(&c, pin, 1);

        // Set clock division (div by 5 for 25MHz state machine)
        sm_config_set_clkdiv(&c, 5);

        // Set this pin's GPIO function (connect PIO to the pad)
        pio_gpio_init(pio, pin);

        // Set pindirections to output at the pio
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); 

        // Load our configuration and jump to the start of our program
        pio_sm_init(pio, sm, offset, &c);
    }
%}