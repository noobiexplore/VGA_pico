; Program name
.program vsync
.side_set 1 opt

; frontporch: 10 lines
; sync pulse: 2 lines
; back porch: 33 lines
; active for: 480 lines

pull block                      ; Pull from FIFO to OSR only once
.wrap_target

; ACTIVE
mov x, osr                      ; Copy value from OSR to x scratch register
activefront:
    wait 1 irq 0                ; Wait for hsync to go high
    irq 1                       ; Signal that we are in the active mode
    jmp x-- activefront

; FRONTPORCH
set y, 9
frontporch:
    wait 1 irq 0
    jmp y-- frontporch

; SYNCPULSE 
set pins, 0                    ; Set pins low
wait 1 irq 0                   ; Wait for a line
wait 1 irq 0                   ; Wait for another line

; BACKPORCH
set y, 31                      ; First part of back porch into y scratch register (and delays a cycle)
backporch:
    wait 1 irq 0 side 1
    jmp y-- backporch

.wrap


% c-sdk {
    static inline void vsync_program_init(PIO pio, uint sm, uint offset, uint pin){

        // creates a state machine configuration object c
        pio_sm_config c = vsync_program_get_default_config(offset);
        // Map the state machine's SET pin group to one pin, namely the `pin`
        // parameter to this function.
        sm_config_set_set_pins(&c, pin, 1);
        sm_config_set_sideset_pins(&c, pin);

        // Set clock division (div by 5 for 25 MHz state machine)
        sm_config_set_clkdiv(&c, 5) ;

        // Set this pin's GPIO function (connect PIO to the pad)
        pio_gpio_init(pio, pin);
        // pio_gpio_init(pio, pin+1);
        
        // Set the pin direction to output at the PIO
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

        // Load our configuration, and jump to the start of the program
        pio_sm_init(pio, sm, offset, &c);

        // Set the state machine running (commented out so can be synchronized with hsync)
        // pio_sm_set_enabled(pio, sm, true);
    }
%}